{"version":3,"sources":["Loading.js","App.js","serviceWorker.js","index.js"],"names":["Loading","_ref","message","react_default","a","createElement","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","cat","getCategory","handleClick","bind","assertThisInitialized","_this2","axios","get","then","res","data","setState","catch","error","id","e","_this3","preventDefault","_this4","joke","getAllCat","getRandomJoke","_this5","_this$state","className","Container","Row","Col","xs","sm","md","map","cats","index","key","role","onClick","href","Card","Img","variant","src","icon_url","Body","Title","Text","value","categories","src_Loading","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2268ed34.chunk.js","sourcesContent":["import React from 'react';\n\nconst Loading = ({message}) => <h2>{message}</h2>\n\nexport default Loading;","import React, { Component } from 'react';\nimport { Card, Container, Row, Col } from 'react-bootstrap';\nimport axios from 'axios';\nimport Loading from './Loading';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      cat: [],\n      getCategory: '',\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getAllCat() {\n    axios.get('https://api.chucknorris.io/jokes/categories')\n      .then(res => {\n        const cat = res.data;\n        this.setState({\n          cat: cat\n        })\n        //console.log(res.data)\n      })\n      .catch(error => this.setState({ error }));\n  }\n\n  handleClick(id, e) {\n    //alert(id);\n    e.preventDefault();\n    axios.get('https://api.chucknorris.io/jokes/random?category=' + id)\n      .then(res => {\n        const getCategory = res.data;\n        this.setState({\n          getCategory,\n          isLoaded: true\n        })\n        //console.log(res.data)\n      })\n      .catch(error => this.setState({ error }));\n\n    this.setState({\n      isLoaded: false\n    })\n  }\n\n  //fetch api axios\n  getRandomJoke() {\n    axios.get(`https://api.chucknorris.io/jokes/random`)\n      .then(res => {\n        const joke = res.data;\n        this.setState({\n          joke,\n          isLoaded: true,\n        })\n        //console.log(res.data)\n      })\n      .catch(error => this.setState({ error, isLoaded: false }));\n\n    this.setState({\n      isLoaded: false\n    })\n  }\n\n\n  componentDidMount() {\n    this.getAllCat();\n    this.getRandomJoke();\n  }\n\n  render() {\n    const { isLoaded, cat, joke, getCategory } = this.state;\n\n    return (\n      <div className=\"App\">\n\n        {isLoaded ?\n          <Container>\n            <Row>\n              <Col xs={2} sm={4} md={4} >\n                <h2>Choose a Category</h2><br />\n                <ul>\n                  {cat.map((cats, index) =>\n                    <li key={index}>\n                      <a role=\"button\" onClick={this.handleClick.bind(this, cats)} href=\"# \"> {cats}</a>\n                    </li>\n                  )}\n                </ul>\n              </Col>\n\n              {getCategory ?\n\n                <Col xs={10} sm={6} md={6} key={getCategory.id}>\n                  <Card>\n                    <Card.Img variant=\"top\" src={getCategory.icon_url} />\n                    <Card.Body>\n                      <Card.Title>Chuck Norris facts</Card.Title>\n                      <Card.Text>\n                        {getCategory.value}<br />\n                      </Card.Text>\n                      <p className=\"small\">Category: {getCategory.categories}</p>\n                    </Card.Body>\n\n                  </Card>\n                </Col>\n                :\n\n                <Col xs={10} sm={6} md={6} key={joke.id}>\n                  <Card>\n                    <Card.Img variant=\"top\" src={joke.icon_url} />\n                    <Card.Body>\n                      <Card.Title>Chuck Norris facts</Card.Title>\n                      <Card.Text>\n                        {joke.value}\n                      </Card.Text>\n                    </Card.Body>\n                  </Card>\n                </Col>\n\n              }\n            </Row>\n          </Container >\n\n          : <Loading message=\"Loading...\" />\n        }\n\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}